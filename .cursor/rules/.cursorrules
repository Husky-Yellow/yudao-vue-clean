# Cursor AI 项目提示词配置
# 物联网治理前端项目 - Vue3 + TypeScript + Vite + Element Plus

## 项目概述
这是一个基于 Vue 3.5.12 的物联网治理管理系统前端项目，使用 TypeScript、Vite、Element Plus、UnoCSS 等技术栈。

## 核心技术栈
- **前端框架**: Vue 3.5.12 (Composition API)
- **构建工具**: Vite 5.1.4
- **语言**: TypeScript 5.3.3
- **UI 框架**: Element Plus 2.9.1
- **CSS 框架**: UnoCSS 0.58.5
- **状态管理**: Pinia 2.1.7 + pinia-plugin-persistedstate
- **路由**: Vue Router 4.4.5
- **HTTP 客户端**: Axios 1.6.8
- **包管理器**: pnpm >= 10.11.0

## 开发规范

### 代码风格
1. **组件开发**:
   - 使用 Vue 3 Composition API 和 `<script setup>` 语法
   - 优先使用 TypeScript 进行类型定义
   - 组件名称使用 PascalCase
   - 文件名使用 kebab-case

2. **目录结构遵循**:
   - `/src/api/` - API 接口层，按业务域分组
   - `/src/components/` - 公共组件，支持自动导入
   - `/src/views/` - 页面组件
   - `/src/hooks/` - Composables 函数
   - `/src/utils/` - 工具函数
   - `/src/types/` - TypeScript 类型定义

3. **API 层规范**:
   ```typescript
   // 统一 API 响应类型
   interface ApiResponse<T = any> {
     code: number
     data: T
     message: string
   }
   ```

### 组件开发要求
1. **Props 定义**: 使用 `defineProps<T>()` 进行类型安全的 props 定义
2. **事件定义**: 使用 `defineEmits<T>()` 定义组件事件
3. **响应式数据**: 优先使用 `ref()` 和 `reactive()`
4. **生命周期**: 使用 Composition API 的生命周期钩子
5. **样式**: 优先使用 UnoCSS 原子类，必要时使用 SCSS

### 表单处理
- 使用 FormCreate 进行动态表单生成
- 表单验证规则统一在 `/src/utils/formRules.ts` 中定义
- 支持 IoT、Zabbix 等业务特定表单模板

### 路由和权限
- 动态路由通过 `/src/utils/routerHelper.ts` 处理
- 使用 `import.meta.glob()` 进行组件懒加载
- 权限指令: `v-hasPermi`、`v-hasRole`

## 编码约定

### 1. 导入顺序
```typescript
// 1. Vue 相关
import { ref, reactive, computed } from 'vue'
// 2. 第三方库
import { ElMessage } from 'element-plus'
// 3. 自定义 hooks/utils
import { useTable } from '@/hooks/web/useTable'
// 4. 类型定义
import type { FormSchema } from '@/types/form'
// 5. 相对路径导入
import './style.scss'
```

### 2. 函数命名
- 事件处理: `handleXxx` 或 `onXxx`
- 业务逻辑: `doXxx`
- 获取数据: `getXxx` 或 `fetchXxx`
- 表单提交: `submitXxx`

### 3. 响应式数据命名
```typescript
const loading = ref(false)
const tableData = ref<TableItem[]>([])
const formData = reactive({
  name: '',
  status: 1
})
```

### 4. 组件 Composables 使用
```typescript
// 表格相关
const { tableObject, methods } = useTable({
  getListApi: getDeviceListApi
})

// 表单相关
const { formRef, rules } = useForm()

// CRUD 操作
const { allSchemas } = useCrudSchemas(schemas)
```

## 业务特定要求

### 1. 设备管理模块
- 支持设备状态实时监控
- 设备配置使用动态表单
- 地图集成使用 Mapmost WebGL

### 2. 工作流模块
- BPMN.js 流程设计器集成
- 支持仿钉钉/飞书风格的简单流程设计器
- 流程表单绑定系统

### 3. 系统管理
- 基于 RBAC 的权限管理
- 字典数据统一管理
- 操作日志记录

## 性能优化要求

### 1. 构建优化
- 使用 esbuild 进行代码压缩
- 按需加载 Element Plus 组件
- 静态资源压缩 (gzip + brotli)
- 合理的代码分割策略

### 2. 运行时优化
- 组件懒加载
- 长列表虚拟滚动
- 图片懒加载
- 防抖节流处理

## 注意事项

### 1. 环境配置
- 开发环境: `pnpm dev` (端口 3000)
- 构建命令: `pnpm build:prod`
- 预览: `pnpm preview`

### 2. 特殊配置
- Mock 数据只在开发环境启用
- 生产环境自动移除 console 语句
- 支持多环境构建 (local/dev/wx/prod)

### 3. 依赖管理
- 使用 pnpm 作为包管理器
- Node.js >= 22.0.0
- 避免使用已移除的多语言功能

## AI 辅助开发指导

当你帮助开发时，请：
1. **优先考虑类型安全**: 所有代码都应该有完整的 TypeScript 类型定义
2. **遵循项目架构**: 新功能应该符合现有的目录结构和代码组织方式
3. **使用项目既有工具**: 优先使用项目中已有的 hooks、utils 和组件
4. **性能意识**: 考虑代码分割、懒加载和缓存策略
5. **业务理解**: 理解物联网设备管理的业务逻辑和数据流
6. **响应式设计**: 确保组件在不同屏幕尺寸下正常工作
7. **错误处理**: 包含适当的错误边界和用户友好的错误提示

### 推荐的代码模式
```vue
<template>
  <div class="page-container">
    <ContentWrap>
      <Search :schema="searchSchema" @search="handleSearch" />
      <Table
        v-model:page-size="tableObject.pageSize"
        v-model:current-page="tableObject.currentPage"
        :data="tableObject.tableList"
        :loading="tableObject.loading"
        @refresh="getList"
      />
    </ContentWrap>
  </div>
</template>

<script setup lang="ts">
import { useTable } from '@/hooks/web/useTable'
import { getDeviceListApi } from '@/api/equipment'
import type { DeviceItem } from '@/api/equipment/types'

defineOptions({
  name: 'DeviceManagement'
})

const { tableObject, methods } = useTable({
  getListApi: getDeviceListApi
})

const { getList } = methods

const handleSearch = (params: any) => {
  tableObject.params = { ...params }
  getList()
}

onMounted(() => {
  getList()
})
</script>
```

请根据这些规范和项目特点来协助开发工作。