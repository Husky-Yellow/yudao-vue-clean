---
description: 物联网治理前端 - Cursor AI 智能开发指南
alwaysApply: true
---

# 🏭 物联网治理前端系统 - Cursor AI 智能开发指南

本目录包含针对 **Tcwy_GovernanceFe** 物联网治理前端项目的深度优化 Cursor 规则集，专为企业级物联网管理系统的 AI 辅助开发而设计。

## 🎯 规则体系架构

### 📁 规则文件架构图
```
.cursor/rules/
├── 🏗️ core.mdc           # 项目核心架构与技术栈指南
├── 🚀 vue.mdc             # Vue 3 企业级组件开发指南  
├── 🔷 typescript.mdc      # TypeScript 类型安全指南
├── 🏭 business.mdc        # 物联网业务开发实战指南
└── 📖 README.mdc          # 智能开发指南说明文档
```

### 🎨 规则覆盖矩阵
```
开发阶段     |  Core  |  Vue  | TypeScript | Business
-------------|--------|-------|------------|----------
🏗️ 架构设计   |   ✅   |   ✅   |     ✅     |    ✅
💻 组件开发   |   ✅   |   ✅   |     ✅     |    ✅
🔧 业务逻辑   |   ✅   |   ✅   |     ✅     |    ✅
🎯 类型安全   |   ✅   |   ✅   |     ✅     |    ✅
⚡ 性能优化   |   ✅   |   ✅   |     ✅     |    ✅
🔐 权限控制   |   ✅   |   ✅   |     ✅     |    ✅
📊 数据处理   |   ✅   |   ✅   |     ✅     |    ✅
🚀 部署运维   |   ✅   |   ❌   |     ❌     |    ✅
```

## 🚀 Cursor AI 使用指南

### 🤖 AI 辅助开发场景

#### 1. 🏗️ 架构设计与重构
```javascript
// 💡 AI 提示：当你需要设计新的业务模块时
"基于现有的设备管理模块，帮我设计一个告警管理模块的完整架构"

// 🎯 AI 会理解：
// ✅ 遵循 DDD 业务域划分原则
// ✅ 使用 Composition API + TypeScript 严格模式
// ✅ 集成 RBAC 权限控制
// ✅ 实现实时数据同步
// ✅ 提供完整的 CRUD 操作
```

#### 2. 🎨 组件开发与优化
```javascript
// 💡 AI 提示：组件开发最佳实践
"帮我创建一个设备状态监控卡片组件，支持实时更新和点击钻取"

// 🎯 AI 会生成：
// ✅ 符合项目组件架构的标准模板
// ✅ 完整的 TypeScript 类型定义
// ✅ Element Plus + UnoCSS 样式集成
// ✅ 响应式数据管理和性能优化
// ✅ 权限控制和错误处理
```

#### 3. 🔧 业务逻辑实现
```javascript
// 💡 AI 提示：复杂业务逻辑开发
"实现一个设备批量配置的业务流程，包含表单验证、API调用、进度显示"

// 🎯 AI 会提供：
// ✅ Composables 业务逻辑封装
// ✅ 分步骤的用户体验设计
// ✅ 异步操作和错误处理
// ✅ 进度反馈和用户提示
// ✅ 批量操作的性能优化
```

#### 4. 🔷 类型安全增强
```javascript
// 💡 AI 提示：类型系统优化
"为设备数据采集功能添加完整的 TypeScript 类型定义"

// 🎯 AI 会创建：
// ✅ 完整的实体类型定义
// ✅ API 请求响应类型
// ✅ 组件 Props/Emits 类型
// ✅ 业务逻辑类型守卫
// ✅ 运行时类型验证
```

### 🎯 AI 智能提示策略

#### 📋 代码生成提示词模板

##### 🏭 设备管理模块
```
"创建一个设备管理的[功能名称]，需要包含：
- 设备数据表格展示
- 实时状态监控
- 批量操作支持
- 地图位置显示
- 权限控制集成
- 导出功能"
```

##### 📋 工作流模块
```
"设计一个[业务流程名称]的工作流，包含：
- BPMN 流程定义
- 动态表单集成
- 任务分配策略
- 流程监控分析
- SLA 管理"
```

##### 🔐 权限管理模块
```
"实现[权限场景]的 RBAC 控制，包含：
- 用户角色管理
- 权限策略配置
- 资源访问控制
- 审计日志记录
- 合规性检查"
```

#### 🔍 代码审查提示词
```
"请审查这段代码的：
- TypeScript 类型安全性
- Vue 3 最佳实践遵循
- 性能优化机会
- 安全漏洞检查
- 业务逻辑合理性
- 代码可维护性"
```

#### 🚀 性能优化提示词
```
"优化这个组件的性能，考虑：
- 虚拟滚动实现
- 数据懒加载
- 组件缓存策略
- 内存泄漏防护
- 网络请求优化
- 用户体验提升"
```

## 📚 智能开发最佳实践

### 🎨 AI 协作开发流程

#### 1. 📋 需求分析阶段
```
用户需求 → AI 理解 → 技术方案 → 架构设计 → 开发计划
    ↓         ↓         ↓         ↓         ↓
 业务分析   技术选型   系统设计   模块划分   任务安排
```

#### 2. 🔄 迭代开发阶段
```
功能开发 → 代码审查 → 测试验证 → 性能优化 → 部署发布
    ↓         ↓         ↓         ↓         ↓
 AI辅助编码  AI代码分析  自动化测试  AI性能建议  CI/CD集成
```

#### 3. 🔧 维护优化阶段
```
监控告警 → 问题诊断 → 解决方案 → 代码重构 → 系统升级
    ↓         ↓         ↓         ↓         ↓
 实时监控   AI故障分析  智能修复   AI重构建议  版本管理
```

### 🎯 AI 提示词优化技巧

#### ✅ 高效提示词特征
- **具体明确** - 详细描述需要实现的功能和要求
- **上下文丰富** - 提供足够的项目背景和业务场景
- **技术规范** - 明确技术栈、架构模式和编码规范
- **质量要求** - 指定性能、安全、可维护性等质量标准

#### ❌ 避免的提示词模式
- **过于宽泛** - "帮我写一个组件"
- **缺乏上下文** - 不说明项目背景和业务需求
- **技术混乱** - 不遵循项目既定的技术栈
- **标准不明** - 没有明确的质量和规范要求

### 🔧 开发效率提升策略

#### 🚀 快速开发技巧
1. **模板复用** - 利用 AI 生成符合项目规范的代码模板
2. **自动完成** - 通过上下文感知实现智能代码补全
3. **错误检查** - AI 实时检查代码规范和潜在问题
4. **重构建议** - 获取代码优化和重构建议

#### 📊 质量保证措施
1. **类型检查** - 确保 TypeScript 类型安全
2. **规范遵循** - 自动检查编码规范compliance
3. **性能监控** - 识别性能瓶颈和优化机会
4. **安全审查** - 检查潜在的安全漏洞

## 🌟 特色功能介绍

### 🔥 物联网业务特化
- **设备管理专家模式** - 深度理解设备生命周期管理
- **工作流引擎集成** - BPMN.js + 动态表单的完美结合
- **实时数据处理** - WebSocket + 事件驱动架构
- **地图可视化** - Mapmost WebGL 高性能地图集成
- **权限精细控制** - 基于 RBAC 的多层级权限管理

### ⚡ 现代化技术栈
- **Vue 3.5.12** - 最新 Composition API + Suspense
- **TypeScript 5.3.3** - 严格模式 + 高级类型编程
- **Vite 5.1.4** - 极速构建 + HMR 热更新
- **Element Plus 2.9.1** - 企业级 UI 组件库
- **UnoCSS 0.58.5** - 原子化 CSS 引擎

### 🏗️ 企业级架构
- **DDD 业务驱动** - 按业务域组织代码结构
- **微前端支持** - 模块化开发 + 独立部署
- **多环境配置** - local/dev/wx/prod 环境隔离
- **性能监控** - 构建分析 + 运行时监控
- **安全防护** - 数据加密 + 访问控制

## 🎓 学习路径建议

### 👨‍💻 新手开发者
1. **先读 `core.mdc`** - 了解项目整体架构和技术选型
2. **学习 `vue.mdc`** - 掌握 Vue 3 现代化开发模式
3. **研究 `typescript.mdc`** - 理解类型安全的重要性
4. **实践 `business.mdc`** - 深入业务场景的开发实战

### 🏛️ 架构师角色
1. **深入 `core.mdc`** - 理解企业级架构设计原则
2. **关注 `business.mdc`** - 掌握业务域驱动设计模式
3. **优化 `typescript.mdc`** - 设计可扩展的类型系统
4. **指导团队使用** - 推广 AI 辅助开发最佳实践

### 🚀 高级开发者
1. **所有规则融会贯通** - 理解规则之间的协同关系
2. **贡献规则优化** - 基于实践经验持续改进
3. **扩展业务规则** - 为新业务场景添加专业指导
4. **AI 提示词优化** - 提升 AI 辅助开发效率

## 🔄 规则维护与更新

### 📝 更新原则
1. **业务导向** - 优先更新与实际业务开发相关的规则
2. **技术演进** - 跟进技术栈版本更新和最佳实践变化
3. **反馈驱动** - 基于开发团队反馈持续优化规则
4. **质量保证** - 确保规则的准确性、一致性和实用性

### 🔧 维护流程
1. **问题收集** - 收集开发过程中的问题和建议
2. **规则分析** - 分析现有规则的不足和改进空间
3. **方案设计** - 设计规则优化方案和更新计划
4. **测试验证** - 验证规则更新的效果和兼容性
5. **文档更新** - 更新相关文档和使用指南

### 📊 效果评估
- **开发效率** - 测量 AI 辅助开发的效率提升
- **代码质量** - 评估生成代码的质量和规范compliance
- **学习曲线** - 评估新团队成员的上手速度
- **维护成本** - 衡量代码维护和重构的成本变化

---

🎯 **通过这套深度优化的 Cursor 规则，你将获得一个真正理解物联网治理业务的 AI 开发伙伴，让开发效率和代码质量都得到显著提升！**