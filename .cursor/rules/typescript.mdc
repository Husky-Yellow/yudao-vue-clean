---
description: 物联网治理 - TypeScript 企业级类型安全指南
glob: "**/*.{ts,tsx,vue}"
alwaysApply: true
---

# 🔷 TypeScript 企业级类型安全指南

你是一位 **TypeScript 类型系统专家**，精通严格模式配置、高级类型编程、泛型设计模式，深度理解物联网业务领域的数据结构设计和 API 类型安全实践。

## 🎯 类型安全核心策略

### 📋 严格模式配置
- **🛡️ 严格类型检查** - `strict: true` + `noImplicitAny: true`
- **🔍 完整性检查** - `exactOptionalPropertyTypes: true`
- **⚡ 性能优化** - `skipLibCheck: true` + `incremental: true`
- **🎯 路径映射** - `@/*` 别名 + 绝对导入路径
- **📦 声明文件** - 自动生成 + 第三方库类型支持

### 🏗️ 企业级类型架构
- **🌐 API 契约驱动** - 后端接口类型完全对齐
- **📊 业务域类型划分** - 设备、工作流、权限、运营四大域
- **🔄 类型复用策略** - 基础类型 + 组合类型 + 工具类型
- **🛠️ 代码生成工具** - OpenAPI → TypeScript 类型自动生成

## 📚 物联网业务类型体系

### 🔌 设备管理类型定义
```typescript
// 🏷️ 设备基础实体类型
interface DeviceEntity {
  readonly id: string                    // 设备唯一标识
  deviceName: string                     // 设备名称
  deviceCode: string                     // 设备编码
  deviceType: DeviceType                 // 设备类型
  deviceCategory: DeviceCategory         // 设备分类
  deviceStatus: DeviceStatus             // 设备状态
  manufacturer: string                   // 制造商
  model: string                          // 设备型号
  firmwareVersion: string                // 固件版本
  hardwareVersion: string                // 硬件版本
  installLocation: LocationInfo          // 安装位置
  networkConfig: NetworkConfig           // 网络配置
  specifications: DeviceSpecifications   // 设备规格
  maintainceInfo: MaintenanceInfo        // 维护信息
  readonly createTime: string            // 创建时间
  readonly updateTime: string            // 更新时间
  readonly createdBy: string             // 创建者
  readonly lastModifiedBy: string        // 最后修改者
}

// 🎛️ 设备类型枚举 (联合类型)
type DeviceType = 
  | 'sensor'          // 传感器
  | 'controller'      // 控制器  
  | 'gateway'         // 网关
  | 'camera'          // 摄像头
  | 'actuator'        // 执行器
  | 'meter'           // 仪表
  | 'alarm'           // 报警器

type DeviceCategory = 
  | 'environmental'   // 环境监测
  | 'security'        // 安防设备
  | 'industrial'      // 工业设备
  | 'building'        // 楼宇设备
  | 'energy'          // 能源设备

// 🚦 设备状态类型 (带状态转换约束)
type DeviceStatus = 
  | 'online'          // 在线
  | 'offline'         // 离线
  | 'error'           // 故障
  | 'maintenance'     // 维护中
  | 'upgrading'       // 升级中
  | 'decommissioned'  // 已报废

// 📍 位置信息类型
interface LocationInfo {
  latitude: number                       // 纬度 (-90 to 90)
  longitude: number                      // 经度 (-180 to 180)
  altitude?: number                      // 海拔高度
  address: string                        // 详细地址
  buildingId?: string                    // 建筑物ID
  floor?: string                         // 楼层
  room?: string                          // 房间
  zone?: string                          // 区域
}

// 🌐 网络配置类型
interface NetworkConfig {
  ipAddress?: string                     // IP地址
  macAddress: string                     // MAC地址
  protocol: CommunicationProtocol        // 通信协议
  port?: number                          // 端口号
  connectionType: ConnectionType         // 连接类型
  signalStrength?: number                // 信号强度 (0-100)
  lastCommunicationTime: string          // 最后通信时间
}

type CommunicationProtocol = 
  | 'tcp' | 'udp' | 'mqtt' | 'coap' | 'modbus' | 'bacnet'

type ConnectionType = 
  | 'ethernet' | 'wifi' | 'cellular' | 'zigbee' | 'lora'

// 📊 设备规格类型
interface DeviceSpecifications {
  powerRequirement: PowerRequirement     // 电源需求
  operatingEnvironment: EnvironmentSpec  // 工作环境
  dimensions: PhysicalDimensions         // 物理尺寸
  weight: number                         // 重量 (kg)
  certifications: string[]              // 认证标准
  warrantyPeriod: number                 // 保修期 (月)
}

interface PowerRequirement {
  voltage: number                        // 工作电压 (V)
  current: number                        // 工作电流 (A)
  power: number                          // 功耗 (W)
  batteryLife?: number                   // 电池续航 (小时)
}

interface EnvironmentSpec {
  temperatureRange: TemperatureRange     // 工作温度范围
  humidityRange: HumidityRange          // 湿度范围
  ipRating: string                       // 防护等级
  vibrationResistance?: boolean          // 抗震性
}

interface TemperatureRange {
  min: number                            // 最低温度 (°C)
  max: number                            // 最高温度 (°C)
}

interface HumidityRange {
  min: number                            // 最低湿度 (%)
  max: number                            // 最高湿度 (%)
}
```

### 📋 工作流引擎类型定义
```typescript
// 🔄 流程定义类型
interface ProcessDefinition {
  readonly id: string                    // 流程定义ID
  processKey: string                     // 流程标识键
  processName: string                    // 流程名称
  processVersion: number                 // 流程版本
  category: ProcessCategory              // 流程分类
  description?: string                   // 流程描述
  bpmnXml: string                        // BPMN XML定义
  formSchema?: FormSchema[]              // 关联表单模式
  participants: ProcessParticipant[]     // 参与者配置
  variables: ProcessVariable[]           // 流程变量
  isActive: boolean                      // 是否激活
  readonly deployTime: string           // 部署时间
  readonly deployedBy: string           // 部署者
}

type ProcessCategory = 
  | 'approval'        // 审批流程
  | 'maintenance'     // 维护流程
  | 'incident'        // 事件处理
  | 'change'          // 变更流程
  | 'procurement'     // 采购流程

// 🎭 流程参与者类型
interface ProcessParticipant {
  nodeId: string                         // 节点ID
  participantType: ParticipantType       // 参与者类型
  assignmentRule: AssignmentRule         // 分配规则
  candidateUsers?: string[]              // 候选用户
  candidateGroups?: string[]             // 候选组
  autoAssign: boolean                    // 自动分配
}

type ParticipantType = 
  | 'user'           // 用户
  | 'role'           // 角色
  | 'group'          // 用户组
  | 'expression'     // 表达式

type AssignmentRule = 
  | 'direct'         // 直接分配
  | 'round_robin'    // 轮询分配
  | 'load_balance'   // 负载均衡
  | 'random'         // 随机分配

// 📊 流程实例类型
interface ProcessInstance {
  readonly id: string                    // 流程实例ID
  processDefinitionId: string            // 流程定义ID
  businessKey: string                    // 业务键
  processName: string                    // 流程名称
  status: ProcessInstanceStatus          // 实例状态
  priority: ProcessPriority              // 优先级
  startTime: string                      // 开始时间
  endTime?: string                       // 结束时间
  duration?: number                      // 持续时间 (毫秒)
  startUserId: string                    // 发起用户
  startUserName: string                  // 发起用户名
  currentTasks: TaskInfo[]               // 当前任务
  processVariables: Record<string, any>  // 流程变量
  attachments: ProcessAttachment[]       // 附件
  comments: ProcessComment[]             // 评论
}

type ProcessInstanceStatus = 
  | 'running'        // 运行中
  | 'completed'      // 已完成
  | 'suspended'      // 已暂停
  | 'canceled'       // 已取消
  | 'terminated'     // 已终止

type ProcessPriority = 'low' | 'normal' | 'high' | 'urgent'
```

### 🔐 权限管理类型定义
```typescript
// 👤 用户实体类型
interface UserEntity {
  readonly id: string                    // 用户ID
  username: string                       // 用户名
  email: string                          // 邮箱
  mobile: string                         // 手机号
  realName: string                       // 真实姓名
  nickname?: string                      // 昵称
  avatar?: string                        // 头像URL
  gender: Gender                         // 性别
  birthday?: string                      // 生日
  status: UserStatus                     // 用户状态
  lastLoginTime?: string                 // 最后登录时间
  lastLoginIp?: string                   // 最后登录IP
  passwordExpiryDate?: string            // 密码过期时间
  isAccountLocked: boolean               // 账户是否锁定
  failedLoginAttempts: number            // 登录失败次数
  roles: RoleEntity[]                    // 用户角色
  permissions: string[]                  // 用户权限
  organizationId: string                 // 所属组织
  departmentId: string                   // 所属部门
  position?: string                      // 职位
  readonly createTime: string            // 创建时间
  readonly updateTime: string            // 更新时间
}

type Gender = 'male' | 'female' | 'other'
type UserStatus = 'active' | 'inactive' | 'locked' | 'pending'

// 🎭 角色实体类型
interface RoleEntity {
  readonly id: string                    // 角色ID
  roleName: string                       // 角色名称
  roleKey: string                        // 角色标识
  roleDescription?: string               // 角色描述
  roleType: RoleType                     // 角色类型
  roleLevel: number                      // 角色级别
  isSystem: boolean                      // 系统内置角色
  status: RoleStatus                     // 角色状态
  permissions: PermissionEntity[]        // 角色权限
  menuIds: string[]                      // 关联菜单
  dataScope: DataScope                   // 数据权限范围
  deptIds?: string[]                     // 数据权限部门
  readonly createTime: string            // 创建时间
  readonly updateTime: string            // 更新时间
}

type RoleType = 'system' | 'business' | 'custom'
type RoleStatus = 'active' | 'inactive'

// 🔑 权限实体类型
interface PermissionEntity {
  readonly id: string                    // 权限ID
  permissionName: string                 // 权限名称
  permissionKey: string                  // 权限标识
  permissionType: PermissionType         // 权限类型
  resourceType: ResourceType             // 资源类型
  resourcePath?: string                  // 资源路径
  httpMethod?: HttpMethod                // HTTP方法
  description?: string                   // 权限描述
  isSystem: boolean                      // 系统内置权限
  parentId?: string                      // 父权限ID
  children?: PermissionEntity[]          // 子权限
  readonly createTime: string            // 创建时间
}

type PermissionType = 'menu' | 'button' | 'api' | 'data'
type ResourceType = 'page' | 'component' | 'api' | 'file' | 'data'
type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'

// 📊 数据权限类型
type DataScope = 
  | 'all'            // 全部数据
  | 'organization'   // 组织数据
  | 'department'     // 部门数据
  | 'department_sub' // 部门及子部门数据
  | 'self'           // 个人数据
  | 'custom'         // 自定义数据
```

## 🛠️ 高级类型编程模式

### 🎯 工具类型组合策略
```typescript
// 🔧 基础工具类型扩展
type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]
}

type DeepRequired<T> = {
  [P in keyof T]-?: T[P] extends object ? DeepRequired<T[P]> : T[P]
}

type DeepReadonly<T> = {
  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P]
}

// 📋 API 请求类型生成器
type CreateRequest<T extends Record<string, any>> = Omit<
  T, 
  'id' | 'createTime' | 'updateTime' | 'createdBy' | 'lastModifiedBy'
> & {
  // 创建请求允许的额外字段
  [K in keyof T as T[K] extends string | undefined ? K : never]?: string
}

type UpdateRequest<T extends Record<string, any>> = Partial<
  Omit<T, 'id' | 'createTime' | 'updateTime' | 'createdBy'>
> & {
  readonly id: string  // ID 必需且不可变
}

type SearchRequest<T extends Record<string, any>> = DeepPartial<
  Pick<T, Exclude<keyof T, 'createTime' | 'updateTime'>>
> & {
  // 搜索参数扩展
  pageNum?: number
  pageSize?: number
  orderBy?: keyof T
  sortOrder?: 'asc' | 'desc'
  // 时间范围搜索
  startTime?: string
  endTime?: string
  // 关键词搜索
  keyword?: string
  // 高级筛选
  filters?: SearchFilter<T>[]
}

// 🔍 搜索过滤器类型
interface SearchFilter<T> {
  field: keyof T
  operator: FilterOperator
  value: any
  logic?: LogicOperator
}

type FilterOperator = 
  | 'eq'      // 等于
  | 'ne'      // 不等于
  | 'gt'      // 大于
  | 'ge'      // 大于等于
  | 'lt'      // 小于
  | 'le'      // 小于等于
  | 'like'    // 模糊匹配
  | 'in'      // 包含
  | 'notin'   // 不包含
  | 'between' // 区间
  | 'isnull'  // 为空
  | 'notnull' // 不为空

type LogicOperator = 'and' | 'or'

// 📊 分页响应类型
interface PaginationMeta {
  readonly total: number        // 总记录数
  readonly pageNum: number      // 当前页码
  readonly pageSize: number     // 每页大小
  readonly pages: number        // 总页数
  readonly hasNext: boolean     // 是否有下一页
  readonly hasPrev: boolean     // 是否有上一页
}

interface PagedResponse<T> {
  readonly data: T[]                  // 数据列表
  readonly pagination: PaginationMeta // 分页信息
  readonly success: boolean           // 请求成功标志
  readonly message?: string           // 响应消息
  readonly timestamp: string          // 响应时间戳
}
```

### 🎨 业务类型生成器
```typescript
// 🔧 业务实体类型生成
type EntityOperations<T extends { id: string }> = {
  create: (data: CreateRequest<T>) => Promise<ApiResponse<T>>
  update: (data: UpdateRequest<T>) => Promise<ApiResponse<T>>
  delete: (id: string) => Promise<ApiResponse<void>>
  findById: (id: string) => Promise<ApiResponse<T>>
  findList: (params: SearchRequest<T>) => Promise<PagedResponse<T>>
  export: (params: SearchRequest<T>) => Promise<Blob>
}

// 🏭 设备管理 API 类型
type DeviceOperations = EntityOperations<DeviceEntity> & {
  // 设备特有操作
  controlDevice: (id: string, command: DeviceCommand) => Promise<ApiResponse<void>>
  getDeviceStatus: (id: string) => Promise<ApiResponse<DeviceStatusInfo>>
  upgradefirmware: (id: string, firmwareUrl: string) => Promise<ApiResponse<void>>
  getDeviceData: (id: string, timeRange: TimeRange) => Promise<ApiResponse<DeviceData[]>>
  calibrateDevice: (id: string, calibrationData: CalibrationData) => Promise<ApiResponse<void>>
}

// 📋 工作流 API 类型
type ProcessOperations = EntityOperations<ProcessInstance> & {
  // 工作流特有操作
  startProcess: (definitionId: string, variables: Record<string, any>) => Promise<ApiResponse<ProcessInstance>>
  completeTask: (taskId: string, variables: Record<string, any>) => Promise<ApiResponse<void>>
  suspendProcess: (instanceId: string) => Promise<ApiResponse<void>>
  resumeProcess: (instanceId: string) => Promise<ApiResponse<void>>
  terminateProcess: (instanceId: string, reason: string) => Promise<ApiResponse<void>>
  getProcessHistory: (instanceId: string) => Promise<ApiResponse<ProcessHistoryEvent[]>>
}

// 🔐 用户管理 API 类型
type UserOperations = EntityOperations<UserEntity> & {
  // 用户特有操作
  changePassword: (userId: string, passwordData: PasswordChangeData) => Promise<ApiResponse<void>>
  resetPassword: (userId: string) => Promise<ApiResponse<{ temporaryPassword: string }>>
  lockUser: (userId: string, reason: string) => Promise<ApiResponse<void>>
  unlockUser: (userId: string) => Promise<ApiResponse<void>>
  assignRoles: (userId: string, roleIds: string[]) => Promise<ApiResponse<void>>
  getUserPermissions: (userId: string) => Promise<ApiResponse<string[]>>
}
```

### 🛡️ 类型安全防护
```typescript
// 🔍 类型守卫函数
function isDeviceEntity(obj: unknown): obj is DeviceEntity {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    typeof (obj as DeviceEntity).id === 'string' &&
    typeof (obj as DeviceEntity).deviceName === 'string' &&
    typeof (obj as DeviceEntity).deviceCode === 'string' &&
    ['sensor', 'controller', 'gateway', 'camera', 'actuator', 'meter', 'alarm']
      .includes((obj as DeviceEntity).deviceType)
  )
}

function isValidApiResponse<T>(response: unknown): response is ApiResponse<T> {
  return (
    typeof response === 'object' &&
    response !== null &&
    typeof (response as ApiResponse<T>).success === 'boolean' &&
    typeof (response as ApiResponse<T>).message === 'string' &&
    'data' in response
  )
}

// 🛠️ 类型断言函数
function assertIsDeviceEntity(obj: unknown): asserts obj is DeviceEntity {
  if (!isDeviceEntity(obj)) {
    throw new Error('Invalid device entity data')
  }
}

function assertIsValidResponse<T>(response: unknown): asserts response is ApiResponse<T> {
  if (!isValidApiResponse<T>(response)) {
    throw new Error('Invalid API response format')
  }
}

// 🎯 运行时类型验证
class TypeValidator {
  static validateDevice(data: unknown): DeviceValidationResult {
    const errors: string[] = []
    
    if (!isDeviceEntity(data)) {
      errors.push('Invalid device entity structure')
      return { isValid: false, errors }
    }
    
    // 设备名称验证
    if (!data.deviceName || data.deviceName.length < 2) {
      errors.push('Device name must be at least 2 characters')
    }
    
    // 设备编码验证
    if (!data.deviceCode || !/^[A-Z0-9]{6,12}$/.test(data.deviceCode)) {
      errors.push('Device code must be 6-12 alphanumeric characters')
    }
    
    // 网络配置验证
    if (data.networkConfig.ipAddress && 
        !/^(\d{1,3}\.){3}\d{1,3}$/.test(data.networkConfig.ipAddress)) {
      errors.push('Invalid IP address format')
    }
    
    return {
      isValid: errors.length === 0,
      errors
    }
  }
}

interface DeviceValidationResult {
  isValid: boolean
  errors: string[]
}
```

## 🎯 开发最佳实践

### 1. 🚀 性能优化类型
- **条件类型优化** - 使用条件类型减少运行时类型检查
- **联合类型策略** - 优先使用联合类型替代枚举
- **类型收窄** - 使用类型守卫进行智能类型推导
- **泛型约束** - 合理使用泛型约束提高类型推导精度

### 2. 🔒 类型安全策略
- **严格模式** - 启用所有 TypeScript 严格检查选项
- **运行时验证** - 关键业务数据进行运行时类型验证
- **API 边界** - 所有 API 调用都有完整类型定义
- **错误处理** - 类型化错误处理和异常管理

### 3. 🏗️ 可维护性
- **类型文档** - 使用 JSDoc 注释增强类型可读性
- **命名规范** - 统一的类型命名和组织方式
- **版本兼容** - 考虑类型定义的向前兼容性
- **代码生成** - 使用工具自动生成重复性类型定义